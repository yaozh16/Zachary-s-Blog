#伸展树、红黑树、B树
##SplayTree
* 目标:
__利用局部性__
* 双层伸展：
仍然使用connect34,但是使v为子树根
* 查找：
直到查找结束，每次查找都是一次旋转操作
* 插入：
查找+join
* 删除：
查找+BST删除
##BTree
* 目标:
__最小化IO所带来的时间消耗__
* 阶:
1. m阶B树表示每个节点最大的子节点数目为m
2. 关键码个数 $[\frac{m+1}{2}]\le n \le m$
* 查找：
1. 层间：BST查找
2. 层内：Vector查找
* __插入导致上溢__
1. 分支($[\frac{m}{2}],1,m-[\frac{m}{2}]$)
2. 插入节点，接入两支
3. 新节点，仍然满足条件
\[
[\frac{m+1}{2}]\le [\frac{m}{2}]+1 \le m\\
[\frac{m+1}{2}]\le m-[\frac{m}{2}]+1 \le m
\]
4. 继续上滤
* __删除导致下溢__
1. 搜索左右：合法则旋转
2. 左右不合法(均在下溢边缘)：合并
## RBTree
* 目标：实现版本保存、保持树的高度在O(logn)
* 特点：与一颗(2,4)BTree对应等效
* 规则：
1. 树根为B
1. 外部节点为B
1. 不存在RR父子
* 查找：正常BST查找
* __插入__
1. 插入R
2. 双R修正：

[x] 对插入的节点x( R )，父节点p( R )，祖父节点g( B )执行3+4重构

[x] 新的子树根染成黑色，其余染成红色
* __删除__
1. 若为红，直接删除，结束
2. 若为黑

|类型|说明|操作|补充|时间|
|-|-|-|-|-|
|BB-1|s为B，有R孩子t|s染成p的颜色，p旋转使s成为子树根，t染黑||1|
|BB-2R|s为B，且孩子均B;p为R|s染红，p染黑||1|
|BB-2B|s为B，且孩子均B;p为B|s染红|上溯继续检查|logn|
|BB-3|s为R(则p为B)|首先s染黑变成子树根，再对p进行BB-1与BB-2R检查|染色有拓扑结构变化|2-3|
